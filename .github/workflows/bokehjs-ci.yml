name: BokehJS-CI

on:
  push:
    branches:
      - main
      - branch-*
  pull_request:

jobs:

  test:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]
        node-version: [16.x]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Install node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Upgrade npm
        shell: bash
        run: |
          npm install --location=global npm@8

      - name: Install chromium
        if: runner.os == 'Linux'
        shell: bash
        run: |
          VER=103.0.5060.53
          REV=chromium_2020
          URL=https://github.com/bokeh/chromium/raw/main/linux/$VER

          if [[ "$(chromium --version | cut -d' ' -f2)" = "$VER" ]]; then
            echo "Using pre-installed version of chromium"
          else
            wget --no-verbose $URL/$REV.assert
            wget --no-verbose $URL/$REV.snap

            sudo snap ack $REV.assert
            sudo snap install $REV.snap
          fi

      - name: Install dependencies
        working-directory: ./bokehjs
        shell: bash
        run: |
          npm ci --no-progress

      - name: Build bokehjs
        working-directory: ./bokehjs
        shell: bash
        run: |
          node make build

      - name: Run tests
        if: success() || failure()
        working-directory: ./bokehjs
        shell: bash
        run: |
          node make test

      - name: Lint codebase
        if: success() || failure()
        working-directory: ./bokehjs
        shell: bash
        run: |
          node make lint

      - name: Check repository status
        if: success() || failure()
        shell: bash
        run: |
          OUTPUT=$(git status --short bokehjs -- ':!bokehjs/test/baselines')
          if [[ ! -z "$OUTPUT" ]]; then echo $OUTPUT; exit 1; fi

      - name: Collect results
        if: runner.os == 'Linux' && (success() || failure())
        shell: bash
        run: |
          SRC="bokehjs/test/baselines/linux"
          DST="bokehjs-report/${SRC}"
          mkdir -p ${DST}
          if [[ -e ${SRC}/report.json ]];
          then
            CHANGED=$(git status --short ${SRC}/\*.blf ${SRC}/\*.png | cut -c4-)
            cp ${SRC}/report.{json,out} ${CHANGED} ${DST}
          fi

      - name: Upload report
        if: runner.os == 'Linux' && (success() || failure())
        uses: actions/upload-artifact@v1
        with:
          name: bokehjs-report
          path: bokehjs-report

  test_docker:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: bokeh/bokeh-dev:latest  # Eventually this will be a named release/branch not "latest"

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # full history to get proper build version

      - name: Start Docker container, build Bokeh and run tests.
        env:
          BOKEH_DOCKER_BUILD: 1
          BOKEH_DOCKER_TEST: 1
          BOKEH_DOCKER_INTERACTIVE: 0
        run: |
          scripts/docker/docker_run.sh $IMAGE_TAG

      - name: Collect results
        shell: bash
        run: |
          SRC="bokehjs/test/baselines/linux"
          DST="bokehjs-report-docker/${SRC}"
          mkdir -p ${DST}
          if [[ -e ${SRC}/report.json ]];
          then
            CHANGED=$(git status --short ${SRC}/\*.blf ${SRC}/\*.png | cut -c4-)
            cp ${SRC}/report.json ${CHANGED} ${DST}
          fi

      - name: Upload report
        uses: actions/upload-artifact@v1
        with:
          name: bokehjs-report-docker
          path: bokehjs-report-docker
